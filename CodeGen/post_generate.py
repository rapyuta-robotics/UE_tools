import argparse
import os
import shutil
import glob

# default dependency pkgs. Commonly used pkgs
# https://github.com/ros2/common_interfaces +  alpha
BASE_ROS_INSTALL_PATH = '/opt/ros/foxy/'
DEFAULT_DEPENDENCY_PKGS = [
    'actionlib_msgs',
    'builtin_interfaces',
    'diagnostic_msgs',
    'geometry_msgs',
    'nav_msgs',
    'sensor_msgs',
    'shape_msgs',
    'std_msgs',
    'std_srvs',
    'stereo_msgs',
    'trajectory_msgs',
    'visualization_msgs',
    'tf2_msgs',
    'pcl_msgs',
    'ackermann_msgs'
]

current_dir = os.getcwd()

parser = argparse.ArgumentParser(description='Copy C++ files to rclUE from ROS2 msgs.')
parser.add_argument('ue_project_path', help='Path to UE project which has rclUE as plugin, e.g. /home/common/turtlebot3-UE')
parser.add_argument('--ros_path', default=BASE_ROS_INSTALL_PATH, help='path to directory which has target files and libs')
parser.add_argument('--pkgs', nargs='*', default=DEFAULT_DEPENDENCY_PKGS, help='path to directory which has target files and libs')
args = parser.parse_args()

ue_project_src_path = os.path.join(args.ue_project_path, 'Plugins/rclUE/Source')
private_path = os.path.join(ue_project_src_path, 'rclUE/Private')
public_path = os.path.join(ue_project_src_path, 'rclUE/Public')

#copy src generated by CodeGeneratorFrompath.py
for type_name in ['Action','Srv','Msg']:
    for file_name in glob.glob('*'+type_name+'.h'):
        shutil.copy(os.path.join(current_dir, file_name), os.path.join(public_path, type_name+'s'))
    for file_name in glob.glob('*'+type_name+'.cpp'):
        shutil.copy(os.path.join(current_dir, file_name), os.path.join(private_path, type_name+'s'))

#copy header and library
for ros_pkg_name in args.pkgs:
    ue_third_party_path = os.path.join(ue_project_src_path, 'ThirdParty/ros')
    ue_third_party_include_path = os.path.join(ue_third_party_path, 'include', ros_pkg_name)
    ue_third_party_lib_path = os.path.join(ue_third_party_path, 'lib')

    ros_include_path = os.path.join(args.ros_path, 'include', ros_pkg_name)
    ros_lib_path = os.path.join(args.ros_path, 'lib')
    print(f'COPY {ros_pkg_name} FROM')
    print(ros_include_path)
    print(ros_lib_path)

    os.makedirs(ue_third_party_include_path, exist_ok=True)
    os.makedirs(ue_third_party_lib_path, exist_ok=True)
    print('TO')
    print(ue_third_party_include_path)
    print(ue_third_party_lib_path)

    # copy header
    try:
        src = ros_include_path
        dst = ue_third_party_include_path
        if os.path.exists(dst):
            shutil.rmtree(dst)
            shutil.copytree(src, dst)
    except OSError as e:
        print(e)
        exit(0)

    # copy lib
    for file_name in glob.glob(os.path.join(ros_lib_path, 'lib'+ros_pkg_name+'__*.so')):
        shutil.copy(file_name, ue_third_party_lib_path)
