# Copyright 2021-2022 Rapyuta Robotics Co., Ltd.
import argparse
import os
import shutil
import glob

def copy_ros_to_ue(ros_install_path, ros_pkg_name,
                   ue_project_path, ue_plugin_name, ue_plugin_folder_name, ue_target_3rd_name, ue_target_ros_wrapper_path):
    ue_target_src_path = os.path.join(ue_project_path, 'Plugins', ue_plugin_folder_name, 'Source')
    ue_target_3rd_path = os.path.join(ue_project_path, 'Plugins', ue_plugin_folder_name, 'ThirdParty', ue_target_3rd_name, 'release')
    ue_public_path = os.path.join(ue_target_src_path, ue_plugin_name, 'Public', ue_target_ros_wrapper_path)
    ue_private_path = os.path.join(ue_target_src_path, ue_plugin_name, 'Private', ue_target_ros_wrapper_path)
    
    # Copy UE wrapper of ros src
    current_dir = os.getcwd()
    for type_name in ['Action','Srv','Msg']:
        for file_name in glob.glob(f'*{type_name}.h'):
            shutil.copy(os.path.join(current_dir, file_name), os.path.join(ue_public_path, f'{type_name}s'))
        for file_name in glob.glob(f'*{type_name}.cpp'):
            shutil.copy(os.path.join(current_dir, file_name), os.path.join(ue_private_path, f'{type_name}s'))
    
    # Copy ROS pkg' include & lib (generated by `colcon build`)
    ros_include_path = os.path.join(ros_install_path, 'include', ros_pkg_name)
    ros_lib_path = os.path.join(ros_install_path, 'lib')
    print(f'COPY {ros_pkg_name} FROM')
    print(ros_include_path)
    print(ros_lib_path)
    
    ue_target_3rd_include_path = os.path.join(ue_target_3rd_path, 'include', ros_pkg_name)
    ue_target_3rd_lib_path = os.path.join(ue_target_3rd_path, 'lib', ros_pkg_name)
    os.makedirs(ue_target_3rd_include_path, exist_ok=True)
    os.makedirs(ue_target_3rd_lib_path, exist_ok=True)
    print('TO')
    print(ue_target_3rd_include_path)
    print(ue_target_3rd_lib_path)
    
    # include
    try:
        src = ros_include_path
        dst = ue_target_3rd_include_path
        if os.path.exists(src):
            shutil.rmtree(dst)
            shutil.copytree(src, dst)
    except OSError as e:
        print(e)
        exit(0)
    
    # lib
    for file_name in glob.glob(os.path.join(ros_lib_path, f'lib{ros_pkg_name}__*.so')):
        shutil.copy(file_name, ue_target_3rd_lib_path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Copy ros package's include + lib from installation folder to target UE plugin's ThirdParty folder"
    )
    parser.add_argument(
        "--ros_install_path",
        help="Path to ros installation. eg: /opt/ros/foxy or ros_pkg_ws/install/pkg_name",
        required=True
    )
    parser.add_argument(
        "--ros_pkg_name",
        help="ROS package name, eg: geometry_msgs",
        required=True
    )
    parser.add_argument(
        "--ue_proj_path",
        help="Path to target UE project",
        required=True
    )
    parser.add_argument(
        "--ue_plugin_name",
        help="UE plugin module name, eg: rclUE, RapyutaSimInternal",
        required=True
    )
    parser.add_argument(
        "--ue_plugin_folder_name",
        help="UE plugin folder name, eg: rclUE, RapyutaSimulationInternal",
        required=True
    )
    parser.add_argument(
        "--ue_target_3rd_name",
        help="Target 3rd name under ThirdParty, eg: sootballs/ros2",
        required=True
    )
    parser.add_argument(
        "--ue_target_ros_wrapper_path",
        help="Target ros wrapper relative folder path under Source's Private/Public, eg: Sootball/ROS2",
        required=True
    )
    args = parser.parse_args()
    print(args)
    assert('RapyutaSimInternal' == args.ue_plugin_name)
    assert('RapyutaSimulationInternal' == args.ue_plugin_folder_name)
    copy_ros_to_ue(args.ros_install_path, args.ros_pkg_name,
                   args.ue_proj_path, args.ue_plugin_name, args.ue_plugin_folder_name,
                   args.ue_target_3rd_name, args.ue_target_ros_wrapper_path)
    